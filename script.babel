/*Random stoic quote generator*/

//Redux:
const BUTTON = 'BUTTON';
const SETUP='SETUP';

const defaultState = {
  text: 'unchanged text',
  author: 'unchanged author'
};

const btnPress = (newState)=>{
  return{
    type: BUTTON,
    currentText: newState.currentText,
    currentAuthor: newState.currentAuthor
  };
};

const setupRandomQuote = (randomized)=>{
  return{
    type: SETUP,
    randomText: randomized.currentText,
    randomAuthor: randomized.currentAuthor
  }
}

const reducer = (state=defaultState, action)=>{
  switch(action.type){
    case BUTTON:
      return {
        text: action.currentText,
        author: action.currentAuthor
      };
    case SETUP:
       return{
         text: action.randomText,
         author: action.randomAuthor
       }
    default:
       return state;
  }
}

const store = Redux.createStore(reducer);

//React:
class Quote extends React.Component{
  constructor(props){
    super(props);
    this.handleClick = this.handleClick.bind(this);
    this.currentState={
      currentText: 'random',
      currentAuthor: 'randoma'
    }
    this.randomizeQuote();
    this.setUpQuote();
    this.currentColor = 0;
  }
  
  componentDidMount(){
    //jQuery
    $("#new-quote").addClass("btn btn-primary");
    $("#text").addClass("lead");
    $("#wrapper").addClass("col-md-5 col-xs-5");
    $(".btn").css("border", "0px");
    this.changeColor(this.currentColor);  
  }
  
  componentDidUpdate(){
     this.changeColor(this.currentColor);
  }
  
  //change internal state to random quote
  randomizeQuote(){
    const index = Math.floor(Math.random() * quotes.length);
    const line = quotes[index].split(' : ');
    this.currentColor = Math.floor(Math.random() * colors.length);
    
    return this.currentState = {
      currentText: line[0],
      currentAuthor: line[1]
    };
  }
  
  changeColor(currentColor){
    //jQuery code to change all the colors
    $(".btn").animate({
      backgroundColor: colors[this.currentColor]
    });
    
    $("html body").animate({
      backgroundColor: colors[this.currentColor],
      color: colors[this.currentColor]
    });
  }
  
  handleClick(){
    this.randomizeQuote();
    this.props.newButtonClick(this.currentState);
  }
  
  setUpQuote(){
    this.props.setUpDispatch(this.currentState);
  }
  
  render(){
    return(
      <div>
        <div id="wrapper">
          <div id="quote-box">
            <div id="quote-text">
              <i class="fa fa-quote-left"></i>
              <span id="text">{this.props.textProps}</span>
            </div>
            <div id="quote-author">
              <span id="author">{this.props.authorProps}</span>
            </div>
            <div id="buttons">
              <a class="button btn btn-primary" id="tweet-quote" href="twitter.com/intent/tweet" target="_top"><i class="fa fa-twitter"></i></a>
              <button id="new-quote" type="button" onClick={this.handleClick}>New Quote</button>
            </div>
          </div>
          <div id="footer">
              
          </div>
        </div>
      </div>
    );
  }
}

//React-Redux:
const Provider = ReactRedux.Provider;
const connect = ReactRedux.connect;

const mapStateToProps = (state)=>{
  return {
    textProps: state.text,
    authorProps: state.author
  }
}

const mapDispatchToProps = (dispatch)=>{
  return{
    newButtonClick: (newState)=>{
      dispatch(btnPress(newState))
    },
    setUpDispatch: (randomized)=>{
      dispatch(setupRandomQuote(randomized))
    }
  }
}

const Container = connect(mapStateToProps, mapDispatchToProps)(Quote);

class AppWrapper extends React.Component{
  render(){
    return(
      <Provider store={store}>
        <Container/>
      </Provider>
    )
  }
}

const root = ReactDOM.createRoot(document.getElementById("app"));
root.render(<AppWrapper />);


//Randomized data:

//quote list
const quotes = [ 
    'The best answer to anger is silence. : -Marcus Aurelius',
    'The more we value things outside our control, the less control we have. : -Marcus Aurelius',
    'How ridiculous and how strange to be surprised at anything which happens in life. : -Marcus Aurelius',
    'You have power over your mind – not outside events. Realize this, and you will find strength. : -Marcus Aurelius',
    'The best revenge is not to be like your enemy. : -Marcus Aurelius',
    'Accept the things to which fate binds you, and love the people with whom fate brings you together, but do so with all your heart. : -Marcus Aurelius',
    'Confine yourself to the present. : -Marcus Aurelius',
    'When you arise in the morning, think of what a precious privilege it is to be alive – to breathe, to think, to enjoy, to love. : -Marcus Aurelius',
    'You can commit injustice by doing nothing. : -Marcus Aurelius',
    'Waste no more time arguing about what a good man should be. Be one. : -Marcus Aurelius',
    'Each day provides its own gifts. : -Marcus Aurelius',
    'Give yourself a gift, the present moment. : -Marcus Aurelius',
    'The only wealth which you will keep forever is the wealth you have given away. : -Marcus Aurelius',
    'Have I been made for this, to lie under the blankets and keep myself warm? : -Marcus Aurelius',
    'Conceal a flaw, and the world will imagine the worst. : -Marcus Aurelius',
    'Life is neither good or evil, but only a place for good and evil. : -Marcus Aurelius',
    'I cannot escape death, but at least I can escape the fear of it. : -Marcus Aurelius',
    'How trivial the things we want so passionately are. : -Marcus Aurelius',
    'Settle on the type of person you want to be and stick to it, whether alone or in company. : -Marcus Aurelius',
    'Consider at what price you sell your integrity, but please, for God’s sake, don’t sell it cheap. : -Marcus Aurelius',
    'We suffer more often in imagination than in reality. : -Seneca',
    'Ignorance is the cause of fear. : -Seneca',
    'While we wait for life, life passes. : -Seneca',
    'Life is long, if you know how to use it. : -Seneca',
    'Hurry up and live. : -Seneca',
    'Cease to hope and you will cease to fear. : -Seneca',
    'Wealth is the slave of a wise man and the master of a fool. : -Seneca',
    'Only time can heal what reason cannot. : -Seneca',
    'While we are postponing, life speeds by. : -Seneca',
    'Life, if well lived, is long enough. : -Seneca',
    'Hang on to your youthful enthusiasms, you will be able to use them better when you are older. : -Seneca',
    'He who is brave is free. : -Seneca',
    'It is a rough road that leads to the heights of greatness. : -Seneca',
    'It is more civilized to make fun of life than to bewail it. : -Seneca',
    'Difficulty comes from our lack of confidence. : -Seneca',
    'Life is very short and anxious for those who forget the past, neglect the present, and fear the future. : -Seneca',
    'What really ruins our character is the fact that none of us looks back over his life. : -Seneca',
    'Religion is regarded by the common people as true, by the wise as false, and by rulers as useful. : -Seneca',
    'It does not matter how many books you have, but how good are the books which you have. : -Seneca',
    'When a person spends all his time in foreign travel, he ends by having many acquaintances, but no friends. : -Seneca',
    'For many men, the acquisition of wealth does not end their troubles, it only changes them. : -Seneca',
    'The greatest remedy for anger is delay. : -Seneca',
    'We have two ears and one mouth so that we can listen twice as much as we speak. : -Epictetus',
    'No man is free who is not master of himself. : -Epictetus',
    'Men are disturbed not by things, but by the view which they take of them. : -Epictetus',
    'It is difficulties that show what men are. : -Epictetus',
    'Make the best use of what is in your power, and take the rest as it happens. : -Epictetus',
    'A ship should not ride on a single anchor, nor life on a single hope. : -Epictetus',
    'No great thing is created suddenly. : -Epictetus',
    'Know, first, who you are, and then adorn yourself accordingly. : -Epictetus',
    'It is the nature of the wise to resist pleasures, but the foolish to be a slave to them. : -Epictetus',
    'First learn the meaning of what you say, and then speak. : -Epictetus',
    'If you want something good, get it yourself. : -Epictetus',
    'He with the most who is content with the least. : Diogenes',
    'The foundation of every state is the education of its youth. : Diogenes',
    'Blushing is the color of virtue. : Diogenes',
    'Dogs and philosophers do the greatest good and get the fewest rewards. : Diogenes',
    'I am not an Athenian or a Greek, but a citizen of the world. : Diogenes',
    'The mob is the mother of tyrants. : Diogenes',
    'Poverty is a virtue which one can teach oneself. : Diogenes',
    'We begin to lose our hesitation to do immoral things when we lose our hesitation to speak of them. : -Musonius Rufus',
    'Humanity must seek what is NOT simple and obvious using the simple and obvious. : -Musonius Rufus',
    'Since every man dies, it is better to die with distinction than to live long. : -Musonius Rufus',
    'Only by exhibiting actions in harmony with the sound words which he has received will anyone be helped by philosophy. : -Musonius Rufus',
    'Thus whoever destroys human marriage destroys the home, the city-the whole human race. : -Musonius Rufus',
    'All the good are friends of one another. : -Zeno',
    'No loss should be more regrettable to us than losing our time, for it’s irretrievable. : -Zeno',
    'Extravagance is its own destroyer. : -Zeno',
    'Man conquers the world by conquering himself. : -Zeno',
    'Steel your sensibilities, so that life shall hurt you as little as possible. : -Zeno',
    'Better to trip with the feet than with the tongue : -Zeno',
    'A bad feeling is a commotion of the mind repugnant to reason, and against nature. : -Zeno'
];

//Colors:
var colors = [
  '#16a085',
  '#27ae60',
  '#2c3e50',
  '#f39c12',
  '#e74c3c',
  '#9b59b6',
  '#FB6964',
  '#342224',
  '#472E32',
  '#BDBB99',
  '#77B1A9',
  '#73A857',
  //too light
	// '#77dd77',
	// '#836953',
	// '#89cff0',
	// '#99c5c4',
	// '#9adedb',
	// '#aa9499',
	// '#aaf0d1',
	// '#b2fba5',
	// '#b39eb5',
	// '#bdb0d0',
	// '#bee7a5',
	// '#befd73',
	// '#c1c6fc',
	// '#c6a4a4',
	// '#cb99c9',
	// '#fdfd96',
	// '#ff6961',
	// '#ff694f',
	// '#ff9899',
	// '#ffb7ce',
	// '#ca9bf7'
];